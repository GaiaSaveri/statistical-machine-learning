dsep(dag, x="A", y="B")
library(bnlearn)
dag<-empty.graph(nodes=c("A", "B", "C", "D", "E", "F", "G","H"))
arc.set<-matrix(c("A", "B",
"B", "D",
"A", "F",
"D", "G",
"F", "G",
"E", "H",
"B", "H"),
byrow = TRUE, ncol = 2,
dimnames = list(NULL, c("from", "to")))
arcs(dag)<-arc.set
plot(dag)
graphviz.plot(dag, layout = "circo")
dsep(dag, x="A", y="B")
dsep(dag, x="A", y="C")
dsep(dag, x="A", y="D", z=c("B", "H"))
dsep(dag, x="A", y="E", z="F")
dsep(dag, x="A", y="E")
dsep(dag, x="A", y="E", z="F")
dsep(dag, x="A", y="E", z="F")
dsep(dag, x="A", y="E", z="F")
dsep(dag, x="G", y="E", z="B")
dsep(dag, x="F", y="C", z="D")
dsep(dag, x="E", y="D", z="B")
dsep(dag, x="C", y="H", z="G")
library(DAAG)
data<-ais
#use str() to get infos on each of the columns
for(i in colnames(data)){
str(data[i])
}
sport_gender<-t(table(data$sport, data$sex))
imbalance<-c()
for(i in 1:(dim(sport_gender)[2])){
if(sport_gender[1,i]>2*sport_gender[2,i]|sport_gender[2,i]>2*sport_gender[1,i]) #imbalance more than 2:1
{
imbalance<-c(imbalance,i)
}
}
#sports with large imbalance
print(sport_gender[,imbalance])
sport_gender<-t(table(data$sport, data$sex))
sport_gender
sport_gender<-t(table(data$sport, data$sex))
imbalance<-c()
for(i in 1:(dim(sport_gender)[2])){
if(sport_gender[1,i]>2*sport_gender[2,i]|sport_gender[2,i]>2*sport_gender[1,i]) #imbalance more than 2:1
{
imbalance<-c(imbalance,i)
}
}
#sports with large imbalance
print(sport_gender[,imbalance])
Elevation<-c(217, 254, 248, 254, 253, 227, 178, 207, 217)
Area<-c(24387, 5374, 4624, 2247, 1353, 1223, 1151, 755, 657)
Manitoba.lakes<-data.frame(elevation = Elevation,  area = Area)
row.names(Manitoba.lakes)<-c("Winnipeg", "Winnipegosis", "Manitoba", "SouthernIndian", "Cedar", "Island", "Gods", "Cross", "Playgreen")
#a
attach(Manitoba.lakes) #the database is searched by R when evaluating a variable
plot(log2(area)~elevation, pch=16, xlim=c(170,280))
text(log2(area)~elevation, labels=row.names(Manitoba.lakes), pos=4)
#text draws the strings given in the vector labels at the coordinate given by x and eventually y (can be omitted)
text(log2(area)~elevation, labels=area, pos=2)
title("Manitoba’s Largest Lakes")
detach(Manitoba.lakes)
# NB: Doubling the area increases log2(area) by 1.0
#b
attach(Manitoba.lakes) #the database is searched by R when evaluating a variable
plot(area~elevation, log="y", pch=16, xlim=c(170,280))
text(area~elevation, labels=row.names(Manitoba.lakes), pos=4)
text(area~elevation, labels=area, pos=2)
title("Manitoba’s Largest Lakes")
detach(Manitoba.lakes)
gender <- factor(c(rep("female", 91), rep("male", 92)))
#gender is the categorizazion of 91 repetitions of the word "female" and 92 repetitions of the word "male"
#levels are authomatically deduced
table(gender) #now table is used to count the occurencies of the levels of gender
#namely "male" and "female"
#we get a table called gender whose columns' names are "female" and "male" and the only row contain
#the number of occurencies of the corresponding label inside the vector gender
gender <- factor(c(rep("female", 91), rep("male", 92)))
#gender is the categorizazion of 91 repetitions of the word "female" and 92 repetitions of the word "male"
#levels are authomatically deduced
table(gender) #now table is used to count the occurencies of the levels of gender
#namely "male" and "female"
#we get a table called gender whose columns' names are "female" and "male" and the only row contain
#the number of occurencies of the corresponding label inside the vector gender
gender <- factor(gender, levels=c("male", "female")) #another way of factorization into levels
table(gender) #same meaning of before
#we can observe that columns are ordered according to the order in which they are given in factor
gender <- factor(gender, levels=c("Male", "female"))
gender
#counting its occurencies has unknown name, with exclude=NULL we show that too
rm(gender) # Remove gender
cutoff_proportion<-function(vector, value){
exceed<-vector[vector>value]
prop<-length(exceed)/length(vector)
return(prop)
}
x<-seq(from=1, to=100, length.out=100)
cutoff1<-50
x_cut1<-cutoff_proportion(x,cutoff1)
x_cut1
cutoff2<-75
x_cut2<-cutoff_proportion(x, cutoff2)
x_cut2
library(Devore7)
data<-ex01.36 #the column we are interested in is C!
dotplot(data$C1, xlab="time to escape (s)")
cutoff_proportion(data$C1, 7*60)
print(cutoff_proportion(data$C1, 7*60))
data
plot(BDI~age, data=socsupport)
#here outliers are explicit, so it is more convenient for the examination of cases where the score seems very high
plot(BDI~unclass(age), data=socsupport)
#data in the three oldest categories are very few
x <- c(8, 54, 534, 1630, 6611)
seq(1, length(x)) #first length(x) numbers starting from 1
seq(along=x) #takes the length from the length of the argument
x<-NULL
seq(1, length(x)) #this is a vector of lenth 2
seq(along=x) #this is a vector of length 0
?iris3
